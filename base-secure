#!/usr/bin/env bash

#=============================================================================
# basejump --- a script that uses Ansible to automate the setup of new hosts
#       with applications, dotfiles, configs, and handly-dandy one-liners on
#       Linux and macOS systems.
# Copyright: (c) 2019 philcryer
# Author: philcryer < phil at philcryer dot com >
# URL:  https://github.com/philcryer/basejump
# License: MIT
#=============================================================================

set -e

distro=$(uname)

function msg_status () {
    echo -e "\x1B[01;34m[*]\x1B[0m $1" 
}
function msg_good () { 
    echo -e "\x1B[01;32m[*]\x1B[0m $1" 
}
function msg_error () { 
    echo -e "\x1B[01;31m[*]\x1B[0m $1" 
}
function msg_notification () { 
    echo -e "\x1B[01;33m[*]\x1B[0m $1"
}

kick-off(){
    clear
    echo -e "\x1B[01;31m"
    echo "    |         |     |                     |    |             |               |"
    echo "  |        |       |    |       |                 |        |             |"
    cat src/logo-ascii.txt
    msg_status "base secure?"
    sudo -v
}

os-check(){
    msg_notification "checking operating system"
        if [ "$distro" == "Linux" ]; then
            msg_good "$distro is supported, continuing"
        fi
}

lowercase(){
	echo "$1" | sed "y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/"
}

distroProfile(){
	OS=`lowercase \`uname\``
	KERNEL=`uname -r`
	MACH=`uname -m`

	if [ "${OS}" == "windowsnt" ]; then
		OS=windows
	elif [ "${OS}" == "darwin" ]; then
		OS=mac
	else
		OS=`uname`
		if [ "${OS}" = "SunOS" ] ; then
			OS=Solaris
			ARCH=`uname -p`
			OSSTR="${OS} ${REV}(${ARCH} `uname -v`)"
		elif [ "${OS}" = "AIX" ] ; then
			OSSTR="${OS} `oslevel` (`oslevel -r`)"
		elif [ "${OS}" = "Linux" ] ; then
			if [ -f /etc/redhat-release ] ; then
				DistroBasedOn='RedHat'
				DIST=`cat /etc/redhat-release |sed s/\ release.*//`
				PSUEDONAME=`cat /etc/redhat-release | sed s/.*\(// | sed s/\)//`
				REV=`cat /etc/redhat-release | sed s/.*release\ // | sed s/\ .*//`
			elif [ -f /etc/SuSE-release ] ; then
				DistroBasedOn='SuSe'
				PSUEDONAME=`cat /etc/SuSE-release | tr "\n" ' '| sed s/VERSION.*//`
				REV=`cat /etc/SuSE-release | tr "\n" ' ' | sed s/.*=\ //`
			elif [ -f /etc/mandrake-release ] ; then
				DistroBasedOn='Mandrake'
				PSUEDONAME=`cat /etc/mandrake-release | sed s/.*\(// | sed s/\)//`
				REV=`cat /etc/mandrake-release | sed s/.*release\ // | sed s/\ .*//`
			elif [ -f /etc/arch-release ] ; then
				DistroBasedOn='Arch'
				if [ -f /etc/lsb-release ] ; then
			        	DIST=`cat /etc/lsb-release | grep '^DISTRIB_ID' | awk -F=  '{ print $2 }'`
			                PSUEDONAME=`cat /etc/lsb-release | grep '^DISTRIB_CODENAME' | awk -F=  '{ print $2 }'`
			                REV=`cat /etc/lsb-release | grep '^DISTRIB_RELEASE' | awk -F=  '{ print $2 }'`
            			fi
			elif [ -f /etc/debian_version ] ; then
				DistroBasedOn='Debian'
				if [ -f /etc/lsb-release ] ; then
			        	DIST=`cat /etc/lsb-release | grep '^DISTRIB_ID' | awk -F=  '{ print $2 }'`
			                PSUEDONAME=`cat /etc/lsb-release | grep '^DISTRIB_CODENAME' | awk -F=  '{ print $2 }'`
			                REV=`cat /etc/lsb-release | grep '^DISTRIB_RELEASE' | awk -F=  '{ print $2 }'`
            			fi
			fi
			if [ -f /etc/UnitedLinux-release ] ; then
				DIST="${DIST}[`cat /etc/UnitedLinux-release | tr "\n" ' ' | sed s/VERSION.*//`]"
			fi
			OS=`lowercase $OS`
			DistroBasedOn=`lowercase $DistroBasedOn`
		 	readonly OS
		 	readonly DIST
			readonly DistroBasedOn
		 	readonly PSUEDONAME
		 	readonly REV
		 	readonly KERNEL
		 	readonly MACH
		fi

	fi
}

software-check(){
    msg_notification "checking for required software"
    for cli in python3 curl git sudo; do
        if ! type "$cli" > /dev/null 2>&1; then
            msg_error "$cli is not installed - install that and try again"; exit 1
        fi
    done
    msg_good "all required software installed"
}

software-check-pip(){
    msg_notification "checking for python pip3"
    for cli in pip3; do
        if ! type "$cli" > /dev/null 2>&1; then
            msg_error "$cli is not installed - attempting to install"
            curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
            python get-pip.py
            rm get-pip.py
        else
            msg_notification "checking for latest version of python pip3"
            pip3 install --upgrade pip
        fi
  	done
    msg_good "python pip is installed"
}

install-ansible(){
    if ! type "ansible" > /dev/null 2>&1; then
        msg_notification "ansible not installed, enter sudo password to install"
        pip3 install ansible
    fi
    PATH=${HOME}/.local/bin:$PATH
    msg_good "ansible is installed"
}

clean(){
    msg_notification "cleaning up any downloaded Ansible files"
    if [ -d "${HOME}/.ansible/" ]; then
        rm -rf ${HOME}/.ansible/
    fi
    msg_notification "removing installed software: Ansible, pip3"
    pip3 freeze --user | xargs pip3 uninstall -y ansible
}


run-ansible(){
    msg_status "handing off to ansible!"
    cd ansible
    ansible-galaxy collection install devsec.hardening 
    ansible-galaxy role install thorian93.upgrade
    ansible-playbook -i inventory -c netconf --become-method sudo --become-user root main.yml
    # If Arch Linux based, run pacman to upgrade because thorian93.upgrade fails on Arch
    if [ ${DistroBasedOn} == "arch" ]; then
	sudo pacman -Syu
    else 
        ansible-playbook -i inventory -c netconf --become-method sudo --become-user root update.yml
    fi
}

the-end(){
    msg_status "completed! Recommended: rerun with clean arguement and then reboot to use latest kernel/software"
}

# new clean routine
if [[ ${1} == "clean" ]]; then
    clean
    exit 0
fi

main(){
    kick-off;
    os-check;
    distroProfile;
    software-check;
    software-check-pip;
    install-ansible;
    run-ansible;
    the-end;
}

main;

exit 0
